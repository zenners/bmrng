# This defines a deployment "recipe" that you can feed to capistrano
# (http://manuals.rubyonrails.com/read/book/17). It allows you to automate
# (among other things) the deployment of your application.

# =============================================================================
# REQUIRED VARIABLES
# =============================================================================
# You must always specify the application and repository for every recipe. The
# repository must be the URL of the repository you want this recipe to
# correspond to. The deploy_to path must be the path on each machine that will
# form the root of the application path.

require 'bundler/capistrano'
# Load RVM's capistrano plugin.    
require 'capistrano/recipes/deploy/strategy/remote_cache'
require 'capistrano/ext/multistage'
load 'deploy/assets'

# very ugly hask to force umask to 002 when creating and checking out the
# repository cache on the remote server.  Should be a better way to do this
class Capistrano::Deploy::Strategy::RemoteCache < Capistrano::Deploy::Strategy::Remote
  private
  def update_repository_cache
    logger.trace "HACKED BY GARTH FOR UMASK: updating the cached checkout on all servers"
    command = "umask 002; if [ -d #{repository_cache} ]; then " +
        "#{source.sync(revision, repository_cache)}; " +
        "else #{source.checkout(revision, repository_cache)}; fi"
    scm_run(command)
  end
end

def current_git_branch
  $git_branch ||= begin
    branch = `git symbolic-ref HEAD 2> /dev/null`.strip.gsub(/^refs\/heads\//, '')
    puts "Deploying branch #{branch}"
    branch
  end
end

def default_stage_from_git
  ({"master"=>"production", "beta"=>"staging"}[current_git_branch]) || current_git_branch
end


default_run_options[:pty] = true  # Must be set for the password prompt from git to work
ssh_options[:forward_agent] = true

set :scm, :git
set :application, "rpsf"
set :repository, "git@github.com:ghitchens/rpsf.git"
set :branch, current_git_branch
set :deploy_via, :remote_cache
set :use_sudo,    false
set :rails_env, default_stage_from_git
set :test_log, "log/capistrano.test.log"

namespace :deploy do
  desc "Restart Application"
  task :restart, :roles => :app do
    run "touch #{current_path}/tmp/restart.txt"
  end

  #before 'deploy:update_code' do
  #  puts "--> Running tests, please wait ..."
  #  unless system "bundle exec rake > #{test_log} 2>&1" #' > /dev/null'
  #    puts "--> Tests failed. Run `cat #{test_log}` to see what went wrong."
  #    exit
  #  else
  #    puts "--> Tests passed"
  #    system "rm #{test_log}"
  #  end
  #end
end

set :stages, %w(bnw alpha staging production)
set :default_stage, default_stage_from_git

# =============================================================================
# ROLES
# =============================================================================
# You can define any number of roles, each of which contains any number of
# machines. Roles might include such things as :web, or :app, or :db, defining
# what the purpose of each machine is. You can also specify options that can
# be used to single out a specific subset of boxes in a particular role, like
# :primary => true.

role :web, "stuart.rosepointnav.com"
role :app, "stuart.rosepointnav.com"
role :db,  "stuart.rosepointnav.com", :primary => true

# =============================================================================
# OPTIONAL VARIABLES
# =============================================================================

#set :deploy_to, "/var/www/" # defaults to "/u/apps/#{application}"
set :user, "www-data"            # defaults to the currently logged in user
# set :scm, :darcs               # defaults to :subversion
# set :svn, "/path/to/svn"       # defaults to searching the PATH
# set :darcs, "/path/to/darcs"   # defaults to searching the PATH
# set :cvs, "/path/to/cvs"       # defaults to searching the PATH
# set :gateway, "gate.host.com"  # default to no gateway

# =============================================================================
# SSH OPTIONS
# =============================================================================
# ssh_options[:keys] = %w(/path/to/my/key /path/to/another/key)
#ssh_options[:port] = 2222

# =============================================================================
# TASKS
# =============================================================================
# Define tasks that run on all (or only some) of the machines. You can specify
# a role (or set of roles) that each task should be executed on. You can also
# narrow the set of servers to a subset of a role by specifying options, which
# must match the options given for the servers to select (like :primary => true)

desc <<DESC
An imaginary backup task. (Execute the 'show_tasks' task to display all
available tasks.)
DESC
task :backup, :roles => :db, :only => { :primary => true } do
  # the on_rollback handler is only executed if this task is executed within
  # a transaction (see below), AND it or a subsequent task fails.
  on_rollback { delete "/tmp/dump.sql" }

  run "mysqldump -u theuser -p thedatabase > /tmp/dump.sql" do |ch, stream, out|
    ch.send_data "thepassword\n" if out =~ /^Enter password:/
  end
end

# Tasks may take advantage of several different helper methods to interact
# with the remote server(s). These are:
#
# * run(command, options={}, &block): execute the given command on all servers
#   associated with the current task, in parallel. The block, if given, should
#   accept three parameters: the communication channel, a symbol identifying the
#   type of stream (:err or :out), and the data. The block is invoked for all
#   output from the command, allowing you to inspect output and act
#   accordingly.
# * sudo(command, options={}, &block): same as run, but it executes the command
#   via sudo.
# * delete(path, options={}): deletes the given file or directory from all
#   associated servers. If :recursive => true is given in the options, the
#   delete uses "rm -rf" instead of "rm -f".
# * put(buffer, path, options={}): creates or overwrites a file at "path" on
#   all associated servers, populating it with the contents of "buffer". You
#   can specify :mode as an integer value, which will be used to set the mode
#   on the file.
# * render(template, options={}) or render(options={}): renders the given
#   template and returns a string. Alternatively, if the :template key is given,
#   it will be treated as the contents of the template to render. Any other keys
#   are treated as local variables, which are made available to the (ERb)
#   template.

desc "Demonstrates the various helper methods available to recipes."
task :helper_demo do
  # "setup" is a standard task which sets up the directory structure on the
  # remote servers. It is a good idea to run the "setup" task at least once
  # at the beginning of your app's lifetime (it is non-destructive).
  setup

  buffer = render("maintenance.rhtml", :deadline => ENV['UNTIL'])
  put buffer, "#{shared_path}/system/maintenance.html", :mode => 0644
  sudo "killall -USR1 dispatch.fcgi"
  run "#{release_path}/script/spin"
  delete "#{shared_path}/system/maintenance.html"
end

# You can use "transaction" to indicate that if any of the tasks within it fail,
# all should be rolled back (for each task that specifies an on_rollback
# handler).

desc "A task demonstrating the use of transactions."
task :long_deploy do
  transaction do
    update_code
    disable_web
    symlink
    migrate
  end

  restart
  enable_web
end

# Cleanup old releases to save disk space
set :keep_releases, 3
after "deploy:update",  "deploy:cleanup"

#Create hooks to start, stop, and restart delayed jobs
after "deploy:stop",    :delayed_job_stop
after "deploy:start",   :delayed_job_start
after "deploy:restart", :delayed_job_restart

task :delayed_job_stop do
  sudo "RAILS_ENV=#{rails_env} #{release_path}/script/delayed_job stop"
end

task :delayed_job_start do
  sudo "RAILS_ENV=#{rails_env} #{release_path}/script/delayed_job start -u www-data #{args}"
end

task :delayed_job_restart do
  sudo "RAILS_ENV=#{rails_env} #{release_path}/script/delayed_job restart -u www-data #{args}"
end

# namespace :deploy do
#   desc "build missing paperclip styles"
#   task :build_missing_paperclip_styles, :roles => :app do
#     run "cd #{release_path}; RAILS_ENV=#{rails_env} bundle exec rake paperclip:refresh:missing_styles"
#   end
# end

# after("deploy:update_code", "deploy:build_missing_paperclip_styles")



